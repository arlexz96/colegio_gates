-- 1) Ver listado de estudiantes de un grupo x.
-- se hace uso de una proyección para solo traer el nombre del curso buscado y el nombre del estudiante omitiendo en que materia esta afiliado

db.cursos.find(
  { nombre: { $eq: "10A" } },
  { "materias.estudiantes.nombre": 1, _id:0, nombre:1}
)

-- 2) Ver la lista de estudiantes que vean una asignatura x.
-- se hace uso de una proyección para traer por medio de un nombre de materia dado sus respectivos estudiantes

db.cursos.find(
  { "materias.nombre": { $eq: "fisica" }},
  { "materias.estudiantes.nombre":1, "materias.estudiantes.numero_documento":1, _id:0,"materias.nombre":1}
)

-- 3) Ver la lista de profesores que le dictan clase a un estudiante x.

--Consulta 1: trae los id de las materias donde esta afiliado el estudiante (lo estamos buscando por el id)

db.cursos.find(
  { "materias.estudiantes.ObjectId": ObjectId("667b3491883debb244f9b385") },
  { "materias.ObjectId": 1, _id: 0 }
)

--Consulta 2: trae los nombres de las materias y los profesores que les dictan  (lo estamos buscando por el id)
-- En este caso estamos usando el $in por que en la primera consulta el estudiante esta en varias materias

db.materias.find(
  { _id: { $in: [ObjectId("667c16cccc6234b8501765ca"),ObjectId("667c16cccc6234b8501765cb")]} },
  { nombre: 1, profesores: 1, _id: 0 }
)


-- 4) Ver los grupos ordenados de forma descendente por la cantidad de estudiantes que tiene inscritos.


db.cursos.aggregate([
  { $unwind: "$materias" },
  { $unwind: "$materias.estudiantes" },
  {
    $group: {
      _id: "$nombre",
      totalEstudiantes: { $sum: 1 }
    }
  },
  {
    $sort: { totalEstudiantes: -1 }
  }
]);